
(function(window, angular){ 'use strict';

angular.module('ngGrid', ['ng'])
    .info({angularVersion:'1.6.6'})    
    .provider('$$grid', function $$GridProvider(){
        this.$get = $$grid;
    });

angular.module('ngGrid')
    .factory('$grid', ['$$grid', function $GridFactory($$grid){
        function register(type, key, value){
            if (key instanceof Object){
                for (var name in key){
                    register(type, name, key[name]);
                }
                return;
            }
            return $$grid.event(type, key, value);
        }
        return {
            action: function(key, value){
                register('action', key, value);
                return this;
            },
            formatter: function(key, value){
                register('format', key, value);
                return this;
            },
            reload: function(){
                $$grid.reload();
                return this;
            },
            getRows: function(){
                return $$grid.data('list');
            },
            getCheckedRows: function(){
                var rows = [];
                angular.forEach($$grid.rows(), function(row){
                    if (row.$checked) rows.push(row);
                });
                return rows.length > 0 ? rows : undefined;
            },
            getRowTotalCount: function(){
                return $$grid.data('rows');
            },
            getPageTotalCount: function(){
                return $$grid.data('pages');
            }
        };
    }]);


angular.module('ngGrid')
    .directive('grid', function(){
        return {
            restrict: 'AE',
            scope: {},
            controller: ['$scope', '$element', '$pagination', '$$grid',
            function GridController($scope, $element, $pagination, $$grid){
                function columns(element){
                    var columns = [];
                    angular.forEach(element.find('column'), function(value){
                        var column = angular.element(value);
                        columns.push({
                            name: column.attr('name'),
                            label: column.text(),
                            format: column.attr('format'),
                            sort: (column.attr('sort')||'false')=='true',
                            search: (column.attr('search')||'false')=='true'
                        });
                    });
                    return columns;
                }
                function actions(element){
                    var options = {};
                    angular.forEach(element.find('actions').children(), function(node){
                        var $node = angular.element(node);
                        if ($node.prop('tagName') === 'SELECT' && $node.children().length > 0){
                            var model = $node.attr('ng-model'), option = [];
                            angular.forEach($node.children(), function(node){
                                var $node = angular.element(node);
                                var value = $node.attr('value');
                                option.push({
                                    label: $node.text(),
                                    value: parseInt(value)
                                });
                            });
                            options[model] = option;
                            $node.attr('ng-options', 'option.value as option.label for option in action.options.'+ model).html('');
                        }
                        $node.attr('ng-grid-action', 'true');        
                    });
                    return {
                        content: element.find('actions').html(),
                        options: options
                    };
                }
                function searcher(columns){
                    var options = [];
                    angular.forEach(columns, function(column){
                        if(column.search == true){
                            options.push({label: column.label, value: column.name});
                        }
                    });

                    return {
                        index: '',
                        value: '',
                        options: options
                    };
                }
                function validateSortOrder(value){
                    if (value == undefined){                        
                        return 'asc';
                    }                  
                    if (! /^asc|desc$/i.test(value)){
                        return alert('Invalid ordering value must be "ASC" or "DESC"!');
                    }                    
                    return value;
                }
                function getStatus(rowCount,offset,limit,display){
                    if(display == 1){
                        return '<span>Displaying '+ offset +' of '+rowCount+' row</span>';
                    }
                    if(rowCount > 1 || limit > 1){
                        return '<span>Displaying '+ offset +' - '+ limit + ' of '+ rowCount +' rows</span>';
                    }
                    if(rowCount == 1){
                        return '<span>Displaying '+ offset +' row</span>';
                    }
                }
                
                $scope.checker = {
                    display: ($element.attr('checker') === 'true'),
                    checked: false,
                    toggle: function(context){
                        if (context === undefined){
                            return $$grid.toggleCheckbox(this.checked);
                        }
                        var checkedCount = 0;
                        angular.forEach(context.$parent.rows, function(row){
                            if (row.$checked) ++checkedCount;
                        });
                        this.checked = (checkedCount === context.$parent.rows.length);
                    }
                };

                $scope.columns = columns($element);
                $scope.action = actions($element);
                $scope.searcher = searcher($scope.columns);

                var display = parseInt($element.attr('display')||15);

                    if($element.find('column').length >= 1){
                        $$grid.init($element.attr('url'), {
                            page: $pagination.get($scope),
                            limit: display,
                            sortIndex: $element.attr('index')||'',
                            sortOrder: validateSortOrder($element.attr('order')),
                            searchIndex: $scope.searcher.index == '' ? $scope.columns[0].name : $scope.searcher.index,
                            searchValue: $scope.searcher.value
                        }, function(rows, pageCount, rowCount){
                            if (! rows)
                            {
                                $scope.rows = [];
                                $scope.status = '<h3 class="no-content">No content to display.</h3>';
                                $scope.pagination = '';
                                return;
                            }

                            var page = $$grid.params().page;
                            var offset = display * (page - 1) + 1;
                            var limit = offset + (rows.length - 1);
                            $scope.rows = rows;
                            $scope.pagination = $pagination.generate(page, pageCount);
                            $scope.status = getStatus(rowCount,offset,limit,display);
                        }).generate($scope).then(function(element){
                            $element.html('').append(element);
                        });
                    }
            }]
        };
    });

angular.module('ngGrid')
    .directive('ngGridOrder', function($$grid, $compile){
        function sorting(index, order){
            $$grid.params().sortIndex = index;
            $$grid.params().sortOrder = order;
            $$grid.reload();
        }
        return {
            restrict: 'A',
            link: function(scope, element, attrs){
                var doWatch = false;
                scope.column.$order = $$grid.params().sortIndex == scope.column.name ? $$grid.params().sortOrder : false;
                element.html(scope.column.label);
                if (scope.column.sort){
                    element.on('click', function(event){
                        event.preventDefault();
                        var value = scope.column.$order||false;
                        angular.forEach(scope.$parent.columns, function(column){
                            column.$order = false;
                        });
                        scope.column.$order = (! value ? 'asc' : (value == 'desc' ? 'asc' : 'desc'));
                        sorting(scope.column.name, scope.column.$order);
                    });

                    scope.$watch('column.$order', function(){
                        if (! doWatch) {
                            return (doWatch = true);
                        }
                        angular.forEach(element.parent().find('span'), function(span){
                            var $span = angular.element(span);
                            $span.removeClass('fa-sort-asc fa-sort-desc');
                        });
                        element.find('span').addClass('fa-sort'+ (! scope.column.$order ? '' : '-'+scope.column.$order));
                     });

                    element.append('<span class="fa fa-sort'+ (! scope.column.$order ? '' : '-'+scope.column.$order) +'"></span>');
                }




                //return element.removeAttr('ng-grid-order');
            }
        };
    });

angular.module('ngGrid')
    .directive('ngGridComponent', function($compile){
        return {
            restrict: 'A',
            scope: {
                ngGridComponent: '='
            },
            link: function(scope, element){
                scope.$watch('ngGridComponent', function(value){
                    element.html('').append($compile(value)(scope.$parent));
                });
            }
        };
    });

angular.module('ngGrid')
    .directive('ngGridColumn', function($$grid, $compile){
        function mapper(keys, map){
            var key = keys.shift();
            var value = map[key];
            return (value instanceof Object) ? mapper(keys, value) : value;
        }
        return {
            restrict: 'A',
            link: function(scope, element){
                console.log(element)
                var column = scope.column;
                var value = mapper(column.name.split('.'), scope.$parent.row);
                if (column.format){
                    value = $$grid.event('format', column.format)(value,scope.$parent.row);
                }
                element.append(value);
                element.attr('ng-grid-column', column.name);
            }
        };
    });

angular.module('ngGrid')
    .directive('ngGridAction', function($$grid){
        var events = {
            ngClick: 'click',
            ngChange: 'change'
        };
        function listen(scope, element, event, action, model){
            element.on(event, function(event){
                event.preventDefault();
                return $$grid.event('action', action)(scope.row, scope[model]);
            });
        }
        return {
            restrict: 'A',
            link: function(scope, element, attrs){
                for(var key in events){
                    if (attrs[key]){
                        listen(scope, element, events[key], attrs[key], attrs.ngModel);
                    }
                }
            }
        };
    });

angular.module('ngGrid')
    .directive('ngGridStatus', function($$grid, $compile){
        return {
            restrict: 'A',
            link: function(scope, element){
                scope.$watch('status', function (){
                    element.html(scope.status);
                });
            }
        };
    });

angular.module('ngGrid')
    .config(function($locationProvider, $routeProvider){
        $locationProvider.html5Mode({
            enabled: true,
            rewriteLinks: 'ng-grid-paginate'
        });
    })
    .directive('ngGridPaginate', function($$grid, $pagination){
        return {
            restrict: 'A',
            link: function(scope, element, attrs){
                element.on('click', function(event){
                    event.preventDefault();
                    if (element.hasClass('active'))
                        return false;
                    $pagination.search('page', attrs.ngGridPaginate).clicked(true);
                    $$grid.params().page = parseInt(attrs.ngGridPaginate);                    
                    $$grid.reload();
                });
            }
        };
    })
    .factory('$pagination', ['$location', '$route', '$$grid', function $$PaginationProvider($location, $route, $$grid){
        var $clicked = true;
        function anchor(label, page, isActive){
            var $a = angular.element('<a>'+label+'</a>');
            $a.attr('href', $location.path()+'?page='+page);
            $a.attr('ng-grid-paginate', page);
            if (isActive) $a.addClass('active');
            return $a[0].outerHTML;
        }
        return {
            get: function(scope){
                scope.$on("$locationChangeSuccess", function(event, current, prev){
                    if (! $clicked) {
                        $$grid.params().page = parseInt($location.$$search.page||1);
                        $$grid.reload();
                    }
                    return $clicked = false;
                });
                return parseInt($location.$$search.page||1);
            },
            generate: function(page, pages){
                var content = '', max = 0;
                while(max <= pages){
                    max += 10;
                    if(page <= max){
                        var min = max - 10;
                        max = (max >= pages) ? pages : ++max;
                        for(var i = min; i <= max; i++){
                            if (i < 1) continue;
                            content += (i == max && max != pages)
                                     ? anchor('...', max, false)
                                     : anchor(i, i, (page == i ? true : false));
                        }
                        break;
                    }
                }
                if (pages > max) content += anchor(pages, pages, false);
                if (page < --i) content += anchor('<i class="fa fa-chevron-right" aria-hidden="true"></i>', page + 1, false);
                if (page > 1) content = anchor('<i class="fa fa-chevron-left" aria-hidden="true"></i>', page - 1, false) + content;
                return content;
            },
            clicked: function(active){
                if (active == undefined)
                    return $clicked;
                $clicked = active;
            },
            path: function(path){
                $location.path(path);
                return this;
            },
            search: function(key, value) {
                $location.search(key, value);
                return this;
            }
        };
    }]);

angular.module('ngGrid')
    .directive('ngGridSearch', function ($$grid, $compile){
        return {
            restrict: 'A',
            link: function(scope, element){
                element.on('click', function(){
                    $$grid.params().searchIndex = scope.searcher.index == '' ? scope.searcher.options[0].value : scope.searcher.index;
                    $$grid.params().searchValue = scope.searcher.value;
                    $$grid.reload();
                });
            }
        };
    });

function $$grid($http, $compile, $templateRequest, $sce, $q){
    var template = '<div class="grid-header">' +
        '<div class="grid-filter" ng-hide="searcher.options.length < 1">' +
        '<select ng-model="searcher.index" ng-options="option.value as option.label for option in searcher.options">' +
        '</select>' +
        '<input ng-model="searcher.value"/>' +
        '<button ng-grid-search>' +
        '<i class="fa fa-search" aria-hidden="true"></i>' +
        '</button></div></div><div class="grid-content">' +
        '<table>' +
        '<thead>' +
        '<tr>' +
        '<td ng-show="checker.display">' +
        '<input type="checkbox" ng-model="checker.checked" ng-change="checker.toggle()" />' +
        '</td><th ng-repeat="column in columns" ng-grid-order>' +
        '</th><td>&nbsp;</td>' +
        '</tr></thead><tbody>' +
        '<tr ng-repeat="row in rows">' +
        '<td ng-show="checker.display">' +
        '<input type="checkbox" ng-model="row.$checked" ng-click="checker.toggle(this)" />' +
        '</td>' +
        '<td ng-repeat="column in columns" ng-grid-column></td><td ng-grid-component="action.content">' +
        '</td>' +
        '</tr></tbody>' +
        '</table>' +
        '</div>' +
        '<div class="grid-footer"><div class="grid-status" ng-grid-status></div><div class="grid-pagination" ng-grid-component="pagination"></div></div>';
    var $scope, $url, $params, $data,$events = {
        action: {},
        format: {}
    };
    function init(data){
        for (var i in data.list){
            data.list[i]['$checked'] = false;
        }
        return data;
    }
    function request(url, params){
        $http.get(url, {params: params}).then(function(response){
            $data = init(response.data);
            $scope($data.list, $data.pages, $data.rows);
        });
    }
    function event(type, name, value){
        if (value === undefined){
            return $events[type][name];
        }
        $events[type][name] = value;
    }
    return {
        init: function(url, params, scope){
            $url = url;
            $params = params;
            $scope = scope;
            request($url, $params);
            console.log($params)
            return this;
        },
        reload: function(){
            //console.log(1)
            request($url, $params);
        },
        event: function(type, name, value){
            return event(type, name, value);
        },
        rows: function(){
            return $data.list;
        },
        data: function(key){
            return $data[key];
        },
        generate: function(scope){
            var deferred = $q.defer();
            deferred.resolve($compile(template)(scope));
            return deferred.promise;
        },
        toggleCheckbox: function(status){
            angular.forEach($data.list, function(row){
                row.$checked = status;
            });
        },
        params: function(){
            return $params;
        }
    };
}

$$grid.$inject=['$http', '$compile', '$templateRequest', '$sce', '$q'];


})(window, window.angular);